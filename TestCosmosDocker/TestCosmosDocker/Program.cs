using System.ComponentModel.DataAnnotations;
using System.Data.Common;
using Microsoft.Azure.Cosmos;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using TestCosmosDocker;

public class Program
{
    public static async Task Main()
    {
        var serviceCollection = new ServiceCollection();
        
        // This is the connection string generated by the Cosmos emulator
        var connectionString =
            "AccountEndpoint=https://localhost:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==";
        
        var cosmosConnStringBuilder = new DbConnectionStringBuilder
        {
            ConnectionString = connectionString
        };
        
        if (!cosmosConnStringBuilder.TryGetValue("AccountKey", out var accountKey) ||
            !cosmosConnStringBuilder.TryGetValue("AccountEndpoint", out var accountEndpoint))
        {
            throw new ArgumentException("Cosmos connection string malformed");
        }

        var databaseName = "test-database";

        await InitializeDatabaseAndContainer(accountEndpoint.ToString()!, accountKey.ToString()!, databaseName);

        serviceCollection.AddDbContext<CosmosContext>(opt =>
            opt.UseCosmos(accountEndpoint.ToString()!, accountKey.ToString()!, databaseName, options =>
            {
                // Only use these client options for local testing. Never use this for production instances.
                // https://docs.microsoft.com/en-us/azure/cosmos-db/local-emulator?tabs=ssl-netstd21#disable-ssl-validation
                options.HttpClientFactory(
                    () => new HttpClient(
                        new HttpClientHandler
                        {
                            ServerCertificateCustomValidationCallback =
                                HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                        }));
                options.ConnectionMode(ConnectionMode.Gateway);
            }));
        
        var provider = serviceCollection.BuildServiceProvider();
        var context = provider.GetService<CosmosContext>();

        var record = new MyModel()
        {
            Id = new Guid(),
            Value = "helloworld"
        };
        
        Console.WriteLine($"Adding record into container {CosmosContext.MyContainerName}...");

        await context!.MyModels.AddAsync(record);
        await context!.SaveChangesAsync();
        
        Console.WriteLine("Record successfully added.");

        var savedRecord = await context!.MyModels
            .FirstOrDefaultAsync(p => p.Id == record.Id) 
                          ?? throw new ValidationException("Record could not be found in Cosmos");
        
        Console.WriteLine($"Removing record from container {CosmosContext.MyContainerName}...");

        context!.MyModels.Remove(savedRecord);
        await context!.SaveChangesAsync();
        
        Console.WriteLine("Record successfully removed.");
    }

    /// <summary>
    /// This method will connect to the Cosmos emulator and create our database and container if they do not already exist
    /// </summary>
    /// <param name="accountEndpoint"></param>
    /// <param name="primaryKey"></param>
    /// <param name="databaseName"></param>
    private static async Task InitializeDatabaseAndContainer(string accountEndpoint, string primaryKey, string databaseName)
    {
        // Only use these client options for local testing. Never use this for production instances.
        // https://docs.microsoft.com/en-us/azure/cosmos-db/local-emulator?tabs=ssl-netstd21#disable-ssl-validation
        CosmosClientOptions cosmosClientOptions = new CosmosClientOptions()
        {
            HttpClientFactory = () =>
            {
                HttpMessageHandler httpMessageHandler = new HttpClientHandler()
                {
                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                };

                return new HttpClient(httpMessageHandler);
            },
            ConnectionMode = ConnectionMode.Gateway
        };
        
        Console.WriteLine("Connecting to the Cosmos emulator...");

        var cosmosClient = new CosmosClient(accountEndpoint, primaryKey, cosmosClientOptions);
        
        Console.WriteLine("Connection successful. \n"
                          +"Upserting database and container into Cosmos...");

        await cosmosClient.CreateDatabaseIfNotExistsAsync(databaseName);
        var db = cosmosClient.GetDatabase(databaseName);
        await db.CreateContainerIfNotExistsAsync(CosmosContext.MyContainerName, "/Id", 400);
        
        Console.WriteLine($"Successfully upserted database {databaseName} and {CosmosContext.MyContainerName}.");
    }
}